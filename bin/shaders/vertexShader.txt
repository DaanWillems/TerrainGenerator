#version 330

layout (location=0) in vec3 position;
layout(location = 1) in vec4 in_normal;

out vec3 pass_colour;//The "flat" qualifier stops the colour from being interpolated over the triangles.

uniform mat4 projectionMatrix;
uniform mat4 worldMatrix;

vec3 lightDirection = vec3(-0.2, -0.2, 1.0);
vec3 lightColour = vec3(1.0, 1.0, 1.0);
vec2 lightBias = vec2(0.2, 0.2);
vec4 in_colour = vec4(0.4, (position.y/2)+1, 0.0, 1.0);

vec3 calculateLighting(){
	vec3 normal = in_normal.xyz * 2.0 - 1.0;//required just because of the format the normals were stored in (0 - 1)
	float brightness = max(dot(-lightDirection, normal), 0.0);
	return (lightColour * lightBias.x) + (brightness * lightColour * lightBias.y);
}

void main()
{
	gl_Position =  projectionMatrix * worldMatrix * vec4(position, 1.0);
	
	vec3 lighting = calculateLighting();
	pass_colour = in_colour.rgb * lighting;
}